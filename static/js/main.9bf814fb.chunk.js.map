{"version":3,"sources":["common/layout.tsx","hooks/input.ts","util/uuid.ts","todo/store.ts","todo/header.tsx","todo/items.tsx","todo/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Row","children","justify","useInput","initValue","useState","inputValue","setInputValue","onInputChange","useCallback","ev","target","value","queryUUID","lastUUID","localStorage","getItem","Number","isNaN","parseInt","setItem","toString","newID","initItems","originTodoItems","items","JSON","parse","store","createStore","action","type","text","id","filter","item","find","TodoHeader","onChange","onPush","dispatch","placeholder","onClick","TodoItem","useEffect","onDelete","TodoItems","direction","map","key","ToDo","setItems","subscribe","getState","cb","saveTodoItems","stringify","window","addEventListener","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9bf814fb.chunk.js","sourcesContent":["import React, { PropsWithChildren } from \"react\";\nimport { Row as CustomRow, Col } from \"antd\";\n\nexport function Row({ children }: PropsWithChildren<{}>) {\n  return (\n    <CustomRow justify=\"center\">\n      <Col>{children}</Col>\n    </CustomRow>\n  );\n}\n","import { useCallback, useEffect, useState } from \"react\";\n\nexport function useInput(\n  initValue: string = \"\"\n): [string, (ev: React.ChangeEvent<HTMLInputElement>) => void] {\n  const [inputValue, setInputValue] = useState(initValue);\n  const onInputChange: ReturnType<typeof useInput>[1] = useCallback(function (\n    ev\n  ) {\n    setInputValue(ev.target.value);\n  },\n  []);\n  return [inputValue, onInputChange];\n}\n\nexport function useOnPageLeave(cb: () => void) {\n  useEffect(() => {\n    window.addEventListener(\"beforeunload\", cb);\n    return () => {\n      window.removeEventListener(\"beforeunload\", cb);\n    };\n  }, [cb]);\n}\n","export function queryUUID(): string {\n  const lastUUID = localStorage.getItem(\"lastUUID\");\n  if (!lastUUID || Number.isNaN(parseInt(lastUUID, 10))) {\n    const uuid = 1;\n    localStorage.setItem(\"lastUUID\", uuid.toString());\n    return uuid.toString();\n  }\n  const uuid = parseInt(lastUUID, 10);\n  const newID = (uuid + 1).toString();\n  localStorage.setItem(\"lastUUID\", newID);\n  return newID;\n}\n","import { createStore } from \"redux\";\nimport { queryUUID } from \"../util/uuid\";\n\nexport function initItems(): { items: IToDoItem[] } {\n  const originTodoItems = localStorage.getItem(\"todoItems\");\n  if (originTodoItems) {\n    return { items: JSON.parse(originTodoItems) };\n  } else {\n    return { items: [] };\n  }\n}\n\ntype Action =\n  | {\n      type: \"delete\";\n      id: string;\n    }\n  | {\n      type: \"update\";\n      id: string;\n      text: string;\n    }\n  | {\n      type: \"add\";\n      text: string;\n    };\n\nexport function TodoItems({ items } = initItems(), action: Action) {\n  switch (action.type) {\n    case \"add\":\n      return { items: [...items, { text: action.text, id: queryUUID() }] };\n    case \"delete\":\n      return { items: items.filter(({ id }) => id !== action.id) };\n    case \"update\":\n      const item = items.find(({ id }) => id === action.id);\n      if (item) {\n        item.text = action.text;\n      }\n      return { items };\n    default:\n      return { items };\n  }\n}\n\nexport const store = createStore(TodoItems);\n","import React, { useCallback } from \"react\";\nimport { Button, Input, Space } from \"antd\";\nimport { useInput } from \"../hooks/input\";\nimport { store } from \"./store\";\n\nexport const TodoHeader = () => {\n  const [value, onChange] = useInput();\n\n  const onPush = useCallback(() => {\n    store.dispatch({ type: \"add\", text: value });\n  }, [value]);\n\n  return (\n    <Space>\n      <Input value={value} placeholder=\"输入\" onChange={onChange} />\n      <Button type=\"link\" onClick={onPush}>\n        添加\n      </Button>\n    </Space>\n  );\n};\n","import { Space, Input, Button } from \"antd\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { useInput } from \"../hooks/input\";\nimport { store } from \"./store\";\n\ninterface TodoItemProps {\n  text: string;\n  id: string;\n}\nfunction TodoItem({ text, id }: TodoItemProps) {\n  const [value, onChange] = useInput(text);\n\n  useEffect(() => {\n    store.dispatch({ type: \"update\", text: value, id });\n  }, [id, value]);\n\n  const onDelete = useCallback(\n    function () {\n      store.dispatch({ type: \"delete\", id });\n    },\n    [id]\n  );\n\n  return (\n    <Space>\n      <Input value={value} placeholder=\"输入\" onChange={onChange} />\n      <Button type=\"link\" onClick={onDelete}>\n        删除\n      </Button>\n    </Space>\n  );\n}\n\ninterface TodoItemsProps {\n  items: IToDoItem[];\n}\nexport function TodoItems({ items }: TodoItemsProps) {\n  return (\n    <Space direction=\"vertical\">\n      {items.map(({ id, text }) => (\n        <Space key={id}>\n          <span>{id}. </span>\n          <TodoItem text={text} id={id} />\n        </Space>\n      ))}\n    </Space>\n  );\n}\n","import { Divider } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Row } from \"../common/layout\";\nimport { useOnPageLeave } from \"../hooks/input\";\nimport { TodoHeader } from \"./header\";\nimport { TodoItems } from \"./items\";\nimport { initItems, store } from \"./store\";\n\nexport function ToDo() {\n  const [items, setItems] = useState<IToDoItem[]>(initItems().items);\n\n  useEffect(() => {\n    return store.subscribe(() => {\n      setItems(store.getState().items);\n    });\n  }, []);\n\n  const saveTodoItems = useCallback(function () {\n    localStorage.setItem(\"todoItems\", JSON.stringify(store.getState().items));\n  }, []);\n\n  useOnPageLeave(saveTodoItems);\n\n  return (\n    <>\n      <Row>\n        <Divider />\n        <TodoHeader />\n        <Divider />\n      </Row>\n      <Row>\n        <TodoItems items={items} />\n      </Row>\n    </>\n  );\n}\n","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport { ToDo } from \"./todo\";\nimport ErrorBoundary from \"antd/lib/alert/ErrorBoundary\";\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <ToDo />\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}